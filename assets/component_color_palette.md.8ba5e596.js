import{o as n,c as a,b as s}from"./app.b8531796.js";const e='{"title":"調色板","description":"","frontmatter":{"editLink":true},"headers":[{"level":2,"title":"Brand Colors","slug":"brand-colors"},{"level":2,"title":"顏色列表","slug":"顏色列表"},{"level":2,"title":"作CSS Classes使用","slug":"作css-classes使用"},{"level":2,"title":"做Stylus變數使用","slug":"做stylus變數使用"},{"level":2,"title":"增加你自己的顏色","slug":"增加你自己的顏色"},{"level":2,"title":"動態改變Brand Colors","slug":"動態改變brand-colors"},{"level":3,"title":"Helper - setBrand","slug":"helper-setbrand"},{"level":3,"title":"Helper - getBrand","slug":"helper-getbrand"}],"relativePath":"component/color_palette.md","lastUpdated":1622106502050}',o={},t=s('<h1 id="調色板"><a class="header-anchor" href="#調色板" aria-hidden="true">#</a> 調色板</h1><p>Quasar框架提供了立即可用的足夠多的可選顏色。你可以把它作為Stylus的變數用在你的CSS程式裡，或是直接作為CSS classes用在你的HTMl模板裡。在你閱讀完 <a href="https://v0-17.quasar-framework.org/guide/quasar-theming.html" target="_blank" rel="noopener noreferrer">Quasar Theming</a> 後，這個頁面用起來將會非常的便利。你可能也會想要查看 <a href="https://v0-17.quasar-framework.org/components/color-utils.html" target="_blank" rel="noopener noreferrer">Color Utils</a></p><h2 id="brand-colors"><a class="header-anchor" href="#brand-colors" aria-hidden="true">#</a> Brand Colors</h2><p>你的App可以有三個主要的顏色，叫<code>primary</code>, <code>secondary</code>和<code>tertiary</code>。</p><p>Quasar元件用的大多數顏色都是這三個你可以改變的顏色。當在設計你自己的App時，第一步應該要做的就是選擇這三個主要顏色。你馬上就會被學到如何改變這些Quasar元件預設的顏色。</p><h2 id="顏色列表"><a class="header-anchor" href="#顏色列表" aria-hidden="true">#</a> 顏色列表</h2><p>這是立即可用的顏色的列表。在你的 app 的 <code>*.vue</code> 檔案裡，把它們作為 CSS classes (在 HTMl 模板)或是 Stylus 變數進行使用。</p><p><code>primary</code> , <code>secondary</code> , <code>tertiary</code></p><p><code>positive</code> , <code>negative</code> , <code>info</code> , <code>warning</code> , <code>white</code> , <code>light</code> , <code>dark</code> , <code>faded</code></p><p>下面的這些顏色可以進行變化:</p><p><code>red</code>,<code>pink</code>,<code>purple</code>,<code>deep-purple</code>,<code>indigo</code>,<code>blue</code>,<code>light-blue</code>,<code>cyan</code>,<code>teal</code>,<code>green</code>,<code>light-green</code>,<code>lime</code>,<code>yellow</code>,<code>amber</code>,<code>orange</code>,<code>deep-orange</code>,<code>brown</code>,<code>grey</code>,<code>blue-grey</code></p><p>顏色變化的例子:<code>red</code>,<code>red-1</code>,<code>red-2</code>,...,<code>red-14</code>。<a href="http://v0-17.quasar-framework.org/quasar-play/android/index.html#/showcase/style-and-identity/color-palette" target="_blank" rel="noopener noreferrer">具體可以看圖片裡展示的</a>。</p><h2 id="作css-classes使用"><a class="header-anchor" href="#作css-classes使用" aria-hidden="true">#</a> 作CSS Classes使用</h2><p>使用<code>text-</code>或<code>bg-</code>前綴作為class的名稱來改變字體或是背景的顏色</p><div class="language-HTML line-numbers-mode"><pre><code><span class="token comment">&lt;!-- changing text color --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-primary<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>....<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- changing background color --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-positive<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="做stylus變數使用"><a class="header-anchor" href="#做stylus變數使用" aria-hidden="true">#</a> 做Stylus變數使用</h2><p>在你的app的<code>*.vue</code>檔案，你可以把<code>$primary</code>,<code>$red-1</code>等作為顏色使用。</p><div class="language-stylus line-numbers-mode"><pre><code>&lt;!-- Notice lang=<span class="token string">&quot;stylus&quot;</span> --&gt;\n&lt;style lang=<span class="token string">&quot;stylus&quot;</span>&gt;\n<span class="token comment">// &quot;variables&quot; is a Webpack alias injected by Quasar CLI</span>\n<span class="token atrule-declaration"><span class="token atrule">@import</span> <span class="token string">&#39;~variables&#39;</span></span>\n\n<span class="token selector">div</span>\n  <span class="token property-declaration"><span class="token property">color</span> $<span class="token color">red</span><span class="token number">-1</span></span>\n  <span class="token property-declaration"><span class="token property">background-color</span> $<span class="token color">grey</span><span class="token number">-5</span></span>\n&lt;/style&gt;\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="增加你自己的顏色"><a class="header-anchor" href="#增加你自己的顏色" aria-hidden="true">#</a> 增加你自己的顏色</h2><p>如果你想在元件上使用你自己設置的顏色。我們有一個叫做<code>brand</code>的顏色，你所要做的就是在你的app中加入下列的CSS:</p><div class="language-css line-numbers-mode"><pre><code><span class="token selector">.text-brand</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #a2aa33<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.bg-brand</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> #a2aa33<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>現在你可以在Quasar元件上用這個顏色了:</p><div class="language-HTML line-numbers-mode"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q-input</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brand<span class="token punctuation">&quot;</span></span> <span class="token attr-name">...</span><span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="動態改變brand-colors"><a class="header-anchor" href="#動態改變brand-colors" aria-hidden="true">#</a> 動態改變Brand Colors</h2><blockquote><p>警告！</p><p>這個功能只有在<a href="https://caniuse.com/#feat=css-variables" target="_blank" rel="noopener noreferrer">瀏覽器支持CSS變數的環境下</a>才能使用。</p><p>這項特性要求版本: Quasar v0.15.7+</p></blockquote><p>你可以在程式運行的時，動態的客製化brand colors:<code>primary</code>,<code>secondary</code>,<code>tertiary</code>,<code>positive</code>,<code>negative</code>,<code>info</code>,<code>warning</code>,<code>light</code>,<code>dark</code>,<code>faded</code>。這意味著，你可以用一個預設的顏色主題來先建立起你的應用，並在展示時選擇另一個顏色主題。</p><p>主要顏色的設置用CSS自訂的屬性來完成，並儲存在根元素(<code>:root</code>)中。每一個屬性有一個名字<code>--q-color-${name}</code>(如：<code>--q-color-primary</code>,<code>--q-color-secondary</code>)，並且有一個合法的CSS顏色值。</p><p>CSS自訂的屬性和一般的CSS一樣使用了相同的inheritance(繼承)規則，所以你可以隨便改變你想要的顏色，其子元素繼承其父元素的更改。</p><p>建議的工作流是在<code>html</code>(<code>document.documentElement</code>)或<code>body</code>(<code>document.body</code>)元素設置你自訂的CSS顏色屬性。這可以讓你在需要恢復為預設顏色時，只要刪除自訂的就行了。</p><p>更多關於CSS自訂屬性(變數)的內容，<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables" target="_blank" rel="noopener noreferrer">請閱讀</a>。</p><h3 id="helper-setbrand"><a class="header-anchor" href="#helper-setbrand" aria-hidden="true">#</a> Helper - setBrand</h3><p>Quasar提供helper方法，在<code>colors</code>utils裡來設置自訂顏色: <code>setBrand(colorName, colorValue[, element])</code></p><table><thead><tr><th>參數</th><th>類型</th><th>Required</th><th>描述</th></tr></thead><tbody><tr><td><code>colorName</code></td><td>String</td><td><em>Yes</em></td><td><code>primary</code>,<code>secondary</code>,<code>tertiary</code>,<code>positive</code>,<code>negative</code>,<code>info</code>,<code>warning</code>,<code>light</code>,<code>dark</code>,<code>faded</code>其中一個</td></tr><tr><td><code>colorValue</code></td><td>String</td><td><em>Yes</em></td><td>合法的CSS顏色值</td></tr><tr><td><code>element</code></td><td>Element</td><td>-</td><td>(預設: <code>document.body</code>)要設置自訂屬性的元素</td></tr></tbody></table><p>使用helper設置brand colors的例子:</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> colors <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;quasar&#39;</span>\n\ncolors<span class="token punctuation">.</span><span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token string">&#39;light&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;#DDD&#39;</span><span class="token punctuation">)</span>\ncolors<span class="token punctuation">.</span><span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token string">&#39;primary&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;#33F&#39;</span><span class="token punctuation">)</span>\ncolors<span class="token punctuation">.</span><span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token string">&#39;primary&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;#F33&#39;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;rebranded-section-id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>helper方法也可以對一些顏色(<code>positive</code>,<code>negative</code>,<code>light</code>)設置依賴的自訂屬性(dependent custom properties)。所以比起使用<code>setProperty()</code>,更推薦用helper來處理。</p></blockquote><h3 id="helper-getbrand"><a class="header-anchor" href="#helper-getbrand" aria-hidden="true">#</a> Helper - getBrand</h3><p>Quasar提供helper方法，在<code>colors</code>utils裡獲取自訂顏色: <code>getBrand(colorName[, element])</code></p><table><thead><tr><th>參數</th><th>類型</th><th>Required</th><th>描述</th></tr></thead><tbody><tr><td><code>colorName</code></td><td>String</td><td><em>Yes</em></td><td><code>primary</code>,<code>secondary</code>,<code>tertiary</code>,<code>positive</code>,<code>negative</code>,<code>info</code>,<code>warning</code>,<code>light</code>,<code>dark</code>,<code>faded</code>其中一個</td></tr><tr><td><code>element</code></td><td>Element</td><td>-</td><td>(預設: <code>document.body</code>)要讀取自訂屬性的元素</td></tr></tbody></table><p>使用helper獲取brand colors的例子:</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> colors <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;quasar&#39;</span>\n\ncolors<span class="token punctuation">.</span><span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token string">&#39;primary&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;#33F&#39;</span>\ncolors<span class="token punctuation">.</span><span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token string">&#39;primary&#39;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;rebranded-section-id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>它的功能與<code>getPropertyValue()</code>一樣，但比之更方便。如果要用原生javascript的方法:</p><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// equivalent of colors.getBrand(&#39;primary&#39;) in raw Javascript:</span>\n\n<span class="token function">getComputedStyle</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token string">&#39;--q-color-primary&#39;</span><span class="token punctuation">)</span> <span class="token comment">// #0273d4</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',43);o.render=function(s,e,o,c,p,r){return n(),a("div",null,[t])};export default o;export{e as __pageData};
